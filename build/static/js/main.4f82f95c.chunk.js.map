{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Note.jsx","components/CreateArea.jsx","components/App.jsx","index.js"],"names":["Header","currentYear","Date","getFullYear","Footer","Note","props","className","title","content","onClick","onClicked","id","CreateArea","useState","newNote","setNewNote","handleChange","event","target","name","value","prevValue","placeholder","onChange","rows","preventDefault","onAdd","App","noteItems","setNoteItems","deleteNote","prevNotes","filter","item","index","console","log","map","note","key","ReactDOM","render","document","getElementById"],"mappings":"wMAQeA,MANf,WACI,OAAO,gCACH,wCCFFC,GAAc,IAAIC,MAAOC,cAQhBC,MANf,WACI,OAAO,gCACH,yCAAeH,EAAf,OCSOI,MAbf,SAAcC,GACV,OACI,yBAAKC,UAAU,QACX,4BAAKD,EAAME,OACX,2BAAIF,EAAMG,SACV,4BACIC,QAAS,WACLJ,EAAMK,UAAUL,EAAMM,MAF9B,YCkDGC,MAvDf,SAAoBP,GAAQ,IAAD,EACOQ,mBAAS,CACnCN,MAAO,GACPC,QAAS,KAHU,mBAChBM,EADgB,KACPC,EADO,KAMvB,SAASC,EAAaC,GAAQ,IAAD,EACHA,EAAMC,OAArBC,EADkB,EAClBA,KAAMC,EADY,EACZA,MAEbL,GAAW,SAACM,GACR,MAAW,UAAPF,EACG,CACHZ,MAAOa,EACPZ,QAASa,EAAUb,SAEL,YAAPW,EACA,CACHZ,MAAOc,EAAUd,MACjBC,QAASY,QAHV,KAef,OACI,6BACI,0BAAMd,UAAU,eACZ,2BACIa,KAAO,QACPC,MAASN,EAAQP,MACjBe,YAAc,QACdC,SAAYP,IAChB,8BACIG,KAAO,UACPC,MAASN,EAAQN,QACjBc,YAAc,iBACdE,KAAO,IACPD,SAAYP,IAEhB,4BACIP,QAtBhB,SAAoBQ,GAChBA,EAAMQ,iBACNpB,EAAMqB,MAAMZ,GACZC,EAAW,MAkBH,UCNDY,MAnCf,WAAiB,IAAD,EACsBd,mBAAS,IAD/B,mBACLe,EADK,KACMC,EADN,KAUZ,SAASC,EAAWnB,GAChBkB,GAAa,SAACE,GACV,OAAOA,EAAUC,QAAO,SAACC,EAAKC,GAC1B,OAAOA,IAAUvB,QAK7B,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYe,MAlBpB,SAAiBZ,GACbe,GAAa,SAACE,GACV,MAAM,GAAN,mBAAWA,GAAX,CAAsBjB,OAE1BqB,QAAQC,IAAItB,MAePc,EAAUS,KAAI,SAACC,EAAMJ,GAAP,OACX,kBAAC,EAAD,CACIK,IAAOL,EACPvB,GAAIuB,EACJ3B,MAAS+B,EAAK/B,MACdC,QAAW8B,EAAK9B,QAChBE,UAAaoB,OAErB,kBAAC,EAAD,QChCZU,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.4f82f95c.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Header() {\r\n    return <header>\r\n        <h1>Keeper</h1>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from \"react\"\r\n\r\nconst currentYear = new Date().getFullYear();\r\n\r\nfunction Footer() {\r\n    return <footer>\r\n        <p> Copyright {currentYear} </p>\r\n    </footer>\r\n}\r\n\r\nexport default Footer","import React from \"react\"\r\n\r\nfunction Note(props) {\r\n    return (\r\n        <div className=\"note\">\r\n            <h1>{props.title}</h1>\r\n            <p>{props.content}</p>\r\n            <button\r\n                onClick={() => {\r\n                    props.onClicked(props.id)//the function is taking the argument of that item's ID\r\n                }}>DELETE</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Note","import React, { useState } from \"react\";\r\n\r\nfunction CreateArea(props) {\r\n    const [newNote, setNewNote] = useState({\r\n        title: \"\",\r\n        content: \"\",\r\n    })\r\n\r\n    function handleChange(event) {\r\n        const {name, value} = event.target\r\n\r\n        setNewNote((prevValue) => {\r\n            if (name===\"title\") {\r\n            return {\r\n                title: value,\r\n                content: prevValue.content\r\n            }\r\n            } else if (name===\"content\") {\r\n                return {\r\n                    title: prevValue.title,\r\n                    content: value\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    function submitNote(event) { //takes the anonymous function I created below and turns it into a named one\r\n        event.preventDefault(); //a function is created so that, on clicking, newNote is passed through prop and data is reset\r\n        props.onAdd(newNote); //passing the new state on clicking a button\r\n        setNewNote(\"\"); //onAdd is a class that is taking the argument of the new state\r\n    }\r\n\r\n    return ( \r\n        <div>\r\n            <form className=\"create-note\">\r\n                <input //need to get states of the input to the notes\r\n                    name = \"title\"\r\n                    value = {newNote.title}\r\n                    placeholder = \"Title\"\r\n                    onChange = {handleChange} / > \r\n                <textarea\r\n                    name = \"content\"\r\n                    value = {newNote.content}\r\n                    placeholder = \"Take a note...\"\r\n                    rows = \"3\"\r\n                    onChange = {handleChange}\r\n                    />\r\n                <button\r\n                    onClick= {submitNote}\r\n                    >\r\n                        Add\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateArea;\r\n","import React, { useState } from \"react\"\r\nimport Header from \"./Header.jsx\"\r\nimport Footer from \"./Footer.jsx\"\r\nimport Note from \"./Note.jsx\"\r\nimport CreateArea from \"./CreateArea.jsx\"\r\n\r\nfunction App () {\r\n    const [noteItems, setNoteItems] = useState([])\r\n\r\n    function addNote(newNote) { //receives info from prop below\r\n        setNoteItems((prevNotes) => {\r\n            return [...prevNotes, newNote];//whatever the info is, it's added onto the end here\r\n        });\r\n        console.log(newNote);\r\n    }\r\n\r\n    function deleteNote(id) { //function takes the argument of ID, which was previously passed through to it\r\n        setNoteItems((prevNotes) => { //setting the array with previous note state\r\n            return prevNotes.filter((item,index) => { //a filter has been placed on the previous state (the notes added up until then)\r\n                return index !== id;//searching by made-up ID (which isn't ideal),\r\n            }); // an array is returned that does not include the index of the note in question\r\n        });\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <Header />\r\n            <CreateArea onAdd={addNote}/>\r\n            {noteItems.map((note, index) => (\r\n                <Note\r\n                    key = {index}\r\n                    id={index}\r\n                    title = {note.title}\r\n                    content = {note.content}\r\n                    onClicked = {deleteNote} //onClicked, the function runs\r\n                />) )}\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App.jsx\"\n\nReactDOM.render(\n    <App />,\n    document.getElementById(\"root\")\n)\n\n//CHALLENGE:\n//1. Implement the add note functionality.\n//- Create a constant that keeps track of the title and content.\n//- Pass the new note back to the App.\n//- Add new note to an array.\n//- Take array and render seperate Note components for each item.\n\n//2. Implement the delete note functionality.\n//- Callback from the Note component to trigger a delete function.\n//- Use the filter function to filter out the item that needs deletion.\n//- Pass a id over to the Note component, pass it back to the App when deleting.\n\n//This is the end result you're aiming for:\n//https://pogqj.csb.app/\n\n"],"sourceRoot":""}